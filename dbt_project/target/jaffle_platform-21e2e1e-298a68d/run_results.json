{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.8", "generated_at": "2025-06-27T20:43:37.360152Z", "invocation_id": "fe6a4a27-439d-4a81-b57c-3ca81250b65f", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.138318Z", "completed_at": "2025-06-27T20:43:37.143555Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.143808Z", "completed_at": "2025-06-27T20:43:37.196252Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.058733224868774414, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.customers", "compiled": true, "compiled_code": "with customers as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_platform\".\"main\".\"orders\"\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n        \n        min(order_date) as first_order_at,\n        max(order_date) as most_recent_order_at,\n        count(*) as number_of_orders,\n\n        sum(food_items_count) as total_food_items,\n        sum(drink_items_count) as total_drink_items,\n        sum(total_items_count) as total_items,\n\n        \n    round(1.0 * sum(food_revenue * 100) / 100, 2)\n as total_food_revenue,\n        \n    round(1.0 * sum(drink_revenue * 100) / 100, 2)\n as total_drink_revenue,\n        \n    round(1.0 * sum(total_revenue * 100) / 100, 2)\n as total_revenue,\n\n        \n    round(1.0 * sum(food_cost * 100) / 100, 2)\n as total_food_cost,\n        \n    round(1.0 * sum(drink_cost * 100) / 100, 2)\n as total_drink_cost,\n        \n    round(1.0 * sum(total_cost * 100) / 100, 2)\n as total_cost,\n\n        \n    round(1.0 * sum(food_profit * 100) / 100, 2)\n as total_food_profit,\n        \n    round(1.0 * sum(drink_profit * 100) / 100, 2)\n as total_drink_profit,\n        \n    round(1.0 * sum(total_profit * 100) / 100, 2)\n as total_profit,\n\n        \n    round(1.0 * sum(total_revenue * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_value,\n        \n    round(1.0 * sum(total_profit * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_profit\n\n    from orders\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.customer_id,\n        customers.customer_name,\n\n        customer_orders.first_order_at,\n        customer_orders.most_recent_order_at,\n        customer_orders.number_of_orders,\n\n        customer_orders.total_food_items,\n        customer_orders.total_drink_items,\n        customer_orders.total_items,\n\n        customer_orders.total_food_revenue,\n        customer_orders.total_drink_revenue,\n        customer_orders.total_revenue,\n\n        customer_orders.total_food_cost,\n        customer_orders.total_drink_cost,\n        customer_orders.total_cost,\n\n        customer_orders.total_food_profit,\n        customer_orders.total_drink_profit,\n        customer_orders.total_profit,\n\n        customer_orders.avg_order_value,\n        customer_orders.avg_order_profit\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"customers\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.199474Z", "completed_at": "2025-06-27T20:43:37.204480Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.204734Z", "completed_at": "2025-06-27T20:43:37.216938Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018755197525024414, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_avg_order_value__0.c1c1601f2c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not avg_order_value >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.219557Z", "completed_at": "2025-06-27T20:43:37.221688Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.221934Z", "completed_at": "2025-06-27T20:43:37.226217Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008137941360473633, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_number_of_orders__0.037b1dd78b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not number_of_orders >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.228916Z", "completed_at": "2025-06-27T20:43:37.230830Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.231050Z", "completed_at": "2025-06-27T20:43:37.235914Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008363008499145508, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_cost__0.0a4e71d80a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.238436Z", "completed_at": "2025-06-27T20:43:37.240625Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.240853Z", "completed_at": "2025-06-27T20:43:37.245133Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008043050765991211, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_cost__0.fa5c6d903f", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.247502Z", "completed_at": "2025-06-27T20:43:37.249391Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.249598Z", "completed_at": "2025-06-27T20:43:37.253497Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007231950759887695, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_items__0.9997c8c335", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.256070Z", "completed_at": "2025-06-27T20:43:37.258232Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.258509Z", "completed_at": "2025-06-27T20:43:37.264100Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010193347930908203, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_revenue__0.b99e7e96c4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.268476Z", "completed_at": "2025-06-27T20:43:37.270381Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.270608Z", "completed_at": "2025-06-27T20:43:37.275593Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008471012115478516, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_cost__0.c65392d802", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.278026Z", "completed_at": "2025-06-27T20:43:37.280245Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.280494Z", "completed_at": "2025-06-27T20:43:37.284902Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008124828338623047, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_items__0.828da3e8bc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.287346Z", "completed_at": "2025-06-27T20:43:37.289416Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.289651Z", "completed_at": "2025-06-27T20:43:37.293760Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007706880569458008, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_revenue__0.3e10988d11", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.296113Z", "completed_at": "2025-06-27T20:43:37.298240Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.298452Z", "completed_at": "2025-06-27T20:43:37.302811Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007918119430541992, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_items__0.3d7b0a080a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.305226Z", "completed_at": "2025-06-27T20:43:37.307326Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.307556Z", "completed_at": "2025-06-27T20:43:37.312867Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008939027786254883, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_revenue__0.217c0fc785", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.315177Z", "completed_at": "2025-06-27T20:43:37.318214Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.318444Z", "completed_at": "2025-06-27T20:43:37.322234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008272171020507812, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_customers_customer_id.5c9bf9911d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.324544Z", "completed_at": "2025-06-27T20:43:37.326627Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.326852Z", "completed_at": "2025-06-27T20:43:37.331265Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00798487663269043, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_customers_customer_name.2bf8eaa065", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.333641Z", "completed_at": "2025-06-27T20:43:37.337431Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.337664Z", "completed_at": "2025-06-27T20:43:37.344699Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012412071228027344, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_platform\".\"main\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_platform\".\"main\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-27T20:43:37.347166Z", "completed_at": "2025-06-27T20:43:37.349941Z"}, {"name": "execute", "started_at": "2025-06-27T20:43:37.350157Z", "completed_at": "2025-06-27T20:43:37.355698Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009691953659057617, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_customers_customer_id.c5af1ff4b1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 0.2907588481903076, "args": {"invocation_command": "dbt build --select jaffle_platform.marts.customers", "print": true, "source_freshness_run_project_hooks": false, "exclude_resource_types": [], "defer": false, "require_nested_cumulative_type_params": false, "show_resource_report": false, "log_format": "json", "target_path": "target/jaffle_platform-21e2e1e-298a68d", "printer_width": 80, "resource_types": [], "version_check": true, "export_saved_queries": false, "favor_state": false, "include_saved_query": false, "use_colors_file": true, "populate_cache": true, "cache_selected_only": false, "project_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt_project", "introspect": true, "log_level": "info", "exclude": [], "partial_parse": true, "state_modified_compare_more_unrendered_values": false, "vars": {}, "log_file_max_bytes": 10485760, "log_format_file": "json", "send_anonymous_usage_stats": false, "empty": false, "quiet": false, "log_path": "/Users/thomastrividic/code/python/jaffle-platform/dbt_project/target/jaffle_platform-21e2e1e-298a68d", "log_level_file": "debug", "skip_nodes_if_on_run_start_fails": false, "require_yaml_configuration_for_mf_time_spines": false, "macro_debugging": false, "partial_parse_file_diff": true, "show": false, "static_parser": true, "use_colors": true, "strict_mode": false, "require_resource_names_without_spaces": false, "select": ["jaffle_platform.marts.customers"], "write_json": true, "warn_error_options": {"include": [], "exclude": []}, "require_explicit_package_overrides_for_builtin_materializations": true, "indirect_selection": "eager", "profiles_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt_project", "require_batched_execution_for_custom_microbatch_strategy": false, "state_modified_compare_vars": false, "which": "build"}}