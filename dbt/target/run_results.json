{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.10.1", "generated_at": "2025-06-19T22:34:12.115812Z", "invocation_id": "9eb34dba-d935-4823-9de8-e70432cbbf81", "invocation_started_at": "2025-06-19T22:34:08.157255Z", "env": {}}, "results": [{"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.546089Z", "completed_at": "2025-06-19T22:34:09.552015Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.552234Z", "completed_at": "2025-06-19T22:34:09.563643Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01851797103881836, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_customers_id.fd630b40ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_customers\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.565652Z", "completed_at": "2025-06-19T22:34:09.567818Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.567970Z", "completed_at": "2025-06-19T22:34:09.571175Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006448030471801758, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_items_id.ba04a3f168", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_items\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.573001Z", "completed_at": "2025-06-19T22:34:09.575098Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.575256Z", "completed_at": "2025-06-19T22:34:09.578379Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006429195404052734, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_orders_id.8d0b417515", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_orders\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.580237Z", "completed_at": "2025-06-19T22:34:09.582076Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.582237Z", "completed_at": "2025-06-19T22:34:09.585848Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006440877914428711, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_products_sku.9ea5f86121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom \"jaffle_platform\".\"main\".\"raw_products\"\nwhere sku is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.587584Z", "completed_at": "2025-06-19T22:34:09.589399Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.589537Z", "completed_at": "2025-06-19T22:34:09.592147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005445957183837891, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_stores_id.bf84e62e4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_stores\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.593859Z", "completed_at": "2025-06-19T22:34:09.596213Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.596404Z", "completed_at": "2025-06-19T22:34:09.602883Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010000944137573242, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_not_null_main_raw_supplies_id.fe2c38d6d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_supplies\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.604811Z", "completed_at": "2025-06-19T22:34:09.607600Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.607758Z", "completed_at": "2025-06-19T22:34:09.614089Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010215997695922852, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_unique_main_raw_customers_id.42581a7c1b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_customers\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.615865Z", "completed_at": "2025-06-19T22:34:09.617643Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.617785Z", "completed_at": "2025-06-19T22:34:09.668974Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.05408215522766113, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_unique_main_raw_items_id.9fb85e5588", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_items\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.670878Z", "completed_at": "2025-06-19T22:34:09.673059Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.673222Z", "completed_at": "2025-06-19T22:34:09.697244Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0273590087890625, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_unique_main_raw_orders_id.fd49aea3d7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_orders\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.699174Z", "completed_at": "2025-06-19T22:34:09.701206Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.701362Z", "completed_at": "2025-06-19T22:34:09.705498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007451057434082031, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_unique_main_raw_products_sku.7677d51e94", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_products\"\nwhere sku is not null\ngroup by sku\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.707429Z", "completed_at": "2025-06-19T22:34:09.709510Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.709663Z", "completed_at": "2025-06-19T22:34:09.713438Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006921052932739258, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.source_unique_main_raw_stores_id.067b11d4e6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_stores\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.715240Z", "completed_at": "2025-06-19T22:34:09.716830Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.716979Z", "completed_at": "2025-06-19T22:34:09.745645Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030963897705078125, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_supplies", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_supplies\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as supply_id,\n        sku as product_id,\n\n        ----------  strings\n        name as supply_name,\n\n        ----------  numerics\n        cost as supply_cost,\n\n        ----------  booleans\n        perishable\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_supplies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.748299Z", "completed_at": "2025-06-19T22:34:09.749714Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.749867Z", "completed_at": "2025-06-19T22:34:09.760119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01235508918762207, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_customers", "compiled": true, "compiled_code": "with source as (\n    select * from \"jaffle_platform\".\"main\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        name as customer_name\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.761875Z", "completed_at": "2025-06-19T22:34:09.763478Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.763622Z", "completed_at": "2025-06-19T22:34:09.773395Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012059211730957031, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_order_items", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_items\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as order_item_id,\n        order_id,\n        sku as product_id\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.774999Z", "completed_at": "2025-06-19T22:34:09.776520Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.776667Z", "completed_at": "2025-06-19T22:34:09.820953Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0464777946472168, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_orders", "compiled": true, "compiled_code": "with source as (\n    select * from \"jaffle_platform\".\"main\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        customer as customer_id,\n        ordered_at as order_date,\n        store_id,\n        subtotal,\n        tax_paid,\n        order_total,\n        'completed' as status  -- Assuming all orders are completed since we don't have status in raw data\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.822638Z", "completed_at": "2025-06-19T22:34:09.824133Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.824278Z", "completed_at": "2025-06-19T22:34:09.833951Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.011806249618530273, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_products", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_products\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        sku as product_id,\n\n        ----------  strings\n        name as product_name,\n        type as product_type,\n        description,\n\n        ----------  numerics\n        price as product_price,\n\n        ----------  booleans\n        type = 'food' as is_food_item,\n        type = 'drink' as is_drink_item\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_products\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.835627Z", "completed_at": "2025-06-19T22:34:09.838144Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.838319Z", "completed_at": "2025-06-19T22:34:09.847659Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012580156326293945, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.stg_stores", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_stores\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as store_id,\n\n        ----------  strings\n        name as store_name,\n\n        ----------  timestamps\n        opened_at as opened_at,\n\n        ----------  numerics\n        tax_rate\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_stores\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.849447Z", "completed_at": "2025-06-19T22:34:09.851362Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.851509Z", "completed_at": "2025-06-19T22:34:09.854967Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0064470767974853516, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_stg_supplies_supply_cost__0.56f9d0fff2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_supplies\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not supply_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.856718Z", "completed_at": "2025-06-19T22:34:09.858956Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.859121Z", "completed_at": "2025-06-19T22:34:09.863844Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008007287979125977, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_supplies_perishable.b0ad96f801", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perishable\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere perishable is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.865516Z", "completed_at": "2025-06-19T22:34:09.867466Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.867628Z", "completed_at": "2025-06-19T22:34:09.870981Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0065348148345947266, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_supplies_product_id.ecc7615471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.872806Z", "completed_at": "2025-06-19T22:34:09.874574Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.874721Z", "completed_at": "2025-06-19T22:34:09.877747Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005808115005493164, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_supplies_supply_cost.5de3da4f1d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_cost\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_cost is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.879380Z", "completed_at": "2025-06-19T22:34:09.881232Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.881367Z", "completed_at": "2025-06-19T22:34:09.884358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005942106246948242, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_supplies_supply_id.2638ae6962", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_id\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.886154Z", "completed_at": "2025-06-19T22:34:09.888085Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.888253Z", "completed_at": "2025-06-19T22:34:09.892609Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007363080978393555, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_supplies_supply_name.cc30977dd2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_name\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.894257Z", "completed_at": "2025-06-19T22:34:09.896280Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.896560Z", "completed_at": "2025-06-19T22:34:09.899881Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006505012512207031, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_order_items_order_id.2063801f96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.901646Z", "completed_at": "2025-06-19T22:34:09.903655Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.903833Z", "completed_at": "2025-06-19T22:34:09.907358Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0066220760345458984, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_order_items_order_item_id.26a7e2bc35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.909057Z", "completed_at": "2025-06-19T22:34:09.911020Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.911187Z", "completed_at": "2025-06-19T22:34:09.914655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0066280364990234375, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_order_items_product_id.5154a8a6f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.916439Z", "completed_at": "2025-06-19T22:34:09.918202Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.918349Z", "completed_at": "2025-06-19T22:34:09.944201Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.028733015060424805, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_stg_order_items_order_item_id.90e333a108", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.946174Z", "completed_at": "2025-06-19T22:34:09.948373Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.948530Z", "completed_at": "2025-06-19T22:34:09.951880Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006772041320800781, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_orders_order_id.81cfe2fe64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"stg_orders\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:09.953579Z", "completed_at": "2025-06-19T22:34:09.956045Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:09.956199Z", "completed_at": "2025-06-19T22:34:09.999946Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.04737591743469238, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_order_items\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.001959Z", "completed_at": "2025-06-19T22:34:10.004219Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.004392Z", "completed_at": "2025-06-19T22:34:10.021576Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.020773887634277344, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_stg_orders_order_id.e3b841c71a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.023408Z", "completed_at": "2025-06-19T22:34:10.025529Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.025685Z", "completed_at": "2025-06-19T22:34:10.030832Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008344888687133789, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.accepted_values_stg_products_product_type__beverage__jaffle.a9aed4257e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_type as value_field,\n        count(*) as n_records\n\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n    group by product_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'beverage','jaffle'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.032624Z", "completed_at": "2025-06-19T22:34:10.034800Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.035012Z", "completed_at": "2025-06-19T22:34:10.038868Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007230997085571289, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_stg_products_product_price__0.d7d70a9cd2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_products\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.040602Z", "completed_at": "2025-06-19T22:34:10.042503Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.042654Z", "completed_at": "2025-06-19T22:34:10.045802Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061419010162353516, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_is_drink_item.339e87c30d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_drink_item\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere is_drink_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.047557Z", "completed_at": "2025-06-19T22:34:10.049381Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.049520Z", "completed_at": "2025-06-19T22:34:10.052703Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006031990051269531, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_is_food_item.8e5e6fcdb1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_food_item\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere is_food_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.054327Z", "completed_at": "2025-06-19T22:34:10.056325Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.056470Z", "completed_at": "2025-06-19T22:34:10.060762Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007266998291015625, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_product_id.6373b0acf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.062425Z", "completed_at": "2025-06-19T22:34:10.064698Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.064865Z", "completed_at": "2025-06-19T22:34:10.068189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0067560672760009766, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_product_name.0b59e4b939", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.069901Z", "completed_at": "2025-06-19T22:34:10.071774Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.071959Z", "completed_at": "2025-06-19T22:34:10.075205Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00615382194519043, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_product_price.d96fdc5e1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.076879Z", "completed_at": "2025-06-19T22:34:10.078771Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.078931Z", "completed_at": "2025-06-19T22:34:10.082563Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006626129150390625, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_products_product_type.7dbdaaf4d8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_type\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.084197Z", "completed_at": "2025-06-19T22:34:10.086363Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.086514Z", "completed_at": "2025-06-19T22:34:10.093456Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01013803482055664, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_stg_order_items_product_id__product_id__ref_stg_products_.886a82c26c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_order_items\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.095275Z", "completed_at": "2025-06-19T22:34:10.097927Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.098073Z", "completed_at": "2025-06-19T22:34:10.102196Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007963180541992188, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_stg_supplies_product_id__product_id__ref_stg_products_.b24247ed0a", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_supplies\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.103913Z", "completed_at": "2025-06-19T22:34:10.105990Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.106129Z", "completed_at": "2025-06-19T22:34:10.110079Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007053852081298828, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_stg_products_product_id.7d950a1467", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.111834Z", "completed_at": "2025-06-19T22:34:10.114037Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.114183Z", "completed_at": "2025-06-19T22:34:10.117870Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00698089599609375, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_stg_stores_tax_rate__1__0.4b4a0f1520", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_stores\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.119555Z", "completed_at": "2025-06-19T22:34:10.121584Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.121723Z", "completed_at": "2025-06-19T22:34:10.124656Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005934000015258789, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_stores_opened_at.7656b80b64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opened_at\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere opened_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.126304Z", "completed_at": "2025-06-19T22:34:10.129647Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.129816Z", "completed_at": "2025-06-19T22:34:10.132970Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007539033889770508, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_stores_store_id.ebecf07ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.134631Z", "completed_at": "2025-06-19T22:34:10.136621Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.136774Z", "completed_at": "2025-06-19T22:34:10.139943Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0061910152435302734, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_stores_store_name.a23576c3a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_name\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.141606Z", "completed_at": "2025-06-19T22:34:10.143544Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.143697Z", "completed_at": "2025-06-19T22:34:10.146726Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006033897399902344, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_stg_stores_tax_rate.b05a8726c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_rate\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere tax_rate is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.148420Z", "completed_at": "2025-06-19T22:34:10.150300Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.150442Z", "completed_at": "2025-06-19T22:34:10.153864Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006486177444458008, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_stg_stores_store_id.2e80d074c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    store_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_id is not null\ngroup by store_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.155746Z", "completed_at": "2025-06-19T22:34:10.158447Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.158587Z", "completed_at": "2025-06-19T22:34:10.177829Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.022584199905395508, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.supplies", "compiled": true, "compiled_code": "select * from \"jaffle_platform\".\"main\".\"stg_supplies\"", "relation_name": "\"jaffle_platform\".\"main\".\"supplies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:10.179501Z", "completed_at": "2025-06-19T22:34:10.181554Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:10.181713Z", "completed_at": "2025-06-19T22:34:11.058924Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.8799726963043213, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.order_items", "compiled": true, "compiled_code": "with order_items as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_order_items\"\n\n),\n\norders as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_orders\"\n\n),\n\nproducts as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_products\"\n\n),\n\nsupplies as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_supplies\"\n\n),\n\norder_supplies_summary as (\n\n    select\n        product_id,\n        sum(supply_cost) as supply_cost\n    from supplies\n    group by 1\n\n),\n\njoined as (\n\n    select\n        order_items.*,\n\n        orders.order_date,\n        orders.store_id,\n\n        products.product_name,\n        \n    round(1.0 * products.product_price / 100, 2)\n as product_price,\n        products.is_food_item,\n        products.is_drink_item,\n\n        \n    round(1.0 * order_supplies_summary.supply_cost / 100, 2)\n as supply_cost,\n\n        -- calculated fields\n        \n    round(1.0 * products.product_price - coalesce(order_supplies_summary.supply_cost, 0) / 100, 2)\n as gross_profit_per_item\n\n    from order_items\n\n    left join orders on order_items.order_id = orders.order_id\n\n    left join products on order_items.product_id = products.product_id\n\n    left join order_supplies_summary\n        on order_items.product_id = order_supplies_summary.product_id\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.060779Z", "completed_at": "2025-06-19T22:34:11.062177Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.062323Z", "completed_at": "2025-06-19T22:34:11.073119Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012869119644165039, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.products", "compiled": true, "compiled_code": "select * from \"jaffle_platform\".\"main\".\"stg_products\"", "relation_name": "\"jaffle_platform\".\"main\".\"products\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.074670Z", "completed_at": "2025-06-19T22:34:11.076541Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.076692Z", "completed_at": "2025-06-19T22:34:11.081505Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007767200469970703, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_order_items_product_price__0.43ad7e7f39", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"order_items\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.083158Z", "completed_at": "2025-06-19T22:34:11.084853Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.085001Z", "completed_at": "2025-06-19T22:34:11.088311Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006049156188964844, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_order_items_supply_cost__0.840b4d2b26", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"order_items\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not supply_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.090061Z", "completed_at": "2025-06-19T22:34:11.091865Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.092019Z", "completed_at": "2025-06-19T22:34:11.095039Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005897045135498047, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_gross_profit_per_item.48da24203b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gross_profit_per_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere gross_profit_per_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.096617Z", "completed_at": "2025-06-19T22:34:11.098498Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.098646Z", "completed_at": "2025-06-19T22:34:11.101637Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005921602249145508, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_is_drink_item.6bb8231b5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_drink_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere is_drink_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.103450Z", "completed_at": "2025-06-19T22:34:11.105475Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.105623Z", "completed_at": "2025-06-19T22:34:11.109675Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007082939147949219, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_is_food_item.c5a4aa0725", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_food_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere is_food_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.111329Z", "completed_at": "2025-06-19T22:34:11.113444Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.113658Z", "completed_at": "2025-06-19T22:34:11.116930Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006559848785400391, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_order_date.287d23d5d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.118684Z", "completed_at": "2025-06-19T22:34:11.120628Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.120774Z", "completed_at": "2025-06-19T22:34:11.124294Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00648188591003418, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_order_id.0207cf2b74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.125944Z", "completed_at": "2025-06-19T22:34:11.127835Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.127990Z", "completed_at": "2025-06-19T22:34:11.131116Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00606989860534668, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_order_item_id.c6fda366bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.132838Z", "completed_at": "2025-06-19T22:34:11.134651Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.134803Z", "completed_at": "2025-06-19T22:34:11.139422Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007550954818725586, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_product_id.d5e49d7c32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.141110Z", "completed_at": "2025-06-19T22:34:11.142887Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.143044Z", "completed_at": "2025-06-19T22:34:11.146196Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005961894989013672, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_product_name.86cd0cf29d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.148011Z", "completed_at": "2025-06-19T22:34:11.149819Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.149966Z", "completed_at": "2025-06-19T22:34:11.153188Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006172895431518555, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_product_price.9e29b4995d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.154862Z", "completed_at": "2025-06-19T22:34:11.156802Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.156951Z", "completed_at": "2025-06-19T22:34:11.159780Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005728006362915039, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_order_items_store_id.dcf872af5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.161423Z", "completed_at": "2025-06-19T22:34:11.163980Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.164182Z", "completed_at": "2025-06-19T22:34:11.171139Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010764122009277344, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_order_items_product_id__product_id__ref_stg_products_.32c12f5221", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"order_items\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.173097Z", "completed_at": "2025-06-19T22:34:11.175490Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.175655Z", "completed_at": "2025-06-19T22:34:11.181950Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009801149368286133, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_order_items_store_id__store_id__ref_stg_stores_.3506d5359d", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select store_id as from_field\n    from \"jaffle_platform\".\"main\".\"order_items\"\n    where store_id is not null\n),\n\nparent as (\n    select store_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_stores\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.183669Z", "completed_at": "2025-06-19T22:34:11.185465Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.185615Z", "completed_at": "2025-06-19T22:34:11.208181Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02547478675842285, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_order_items_order_item_id.7d0a7e900a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.210457Z", "completed_at": "2025-06-19T22:34:11.213104Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.213284Z", "completed_at": "2025-06-19T22:34:11.849129Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.6392641067504883, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.orders", "compiled": true, "compiled_code": "with orders as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_orders\"\n\n),\n\norder_items as (\n\n    select * from \"jaffle_platform\".\"main\".\"order_items\"\n\n),\n\norder_items_summary as (\n\n    select\n        order_id,\n        \n        sum(case when is_food_item then 1 else 0 end) as food_items_count,\n        sum(case when is_drink_item then 1 else 0 end) as drink_items_count,\n        count(*) as total_items_count,\n\n        \n    round(1.0 * sum(case when is_food_item then product_price * 100 else 0 end) / 100, 2)\n as food_revenue,\n        \n    round(1.0 * sum(case when is_drink_item then product_price * 100 else 0 end) / 100, 2)\n as drink_revenue,\n        \n    round(1.0 * sum(product_price * 100) / 100, 2)\n as total_revenue,\n\n        \n    round(1.0 * sum(case when is_food_item then supply_cost * 100 else 0 end) / 100, 2)\n as food_cost,\n        \n    round(1.0 * sum(case when is_drink_item then supply_cost * 100 else 0 end) / 100, 2)\n as drink_cost,\n        \n    round(1.0 * sum(supply_cost * 100) / 100, 2)\n as total_cost,\n\n        \n    round(1.0 * sum(case when is_food_item then gross_profit_per_item * 100 else 0 end) / 100, 2)\n as food_profit,\n        \n    round(1.0 * sum(case when is_drink_item then gross_profit_per_item * 100 else 0 end) / 100, 2)\n as drink_profit,\n        \n    round(1.0 * sum(gross_profit_per_item * 100) / 100, 2)\n as total_profit\n\n    from order_items\n    group by 1\n\n),\n\njoined as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.store_id,\n        orders.order_date,\n        orders.status,\n\n        order_items_summary.food_items_count,\n        order_items_summary.drink_items_count,\n        order_items_summary.total_items_count,\n\n        order_items_summary.food_revenue,\n        order_items_summary.drink_revenue,\n        order_items_summary.total_revenue,\n\n        order_items_summary.food_cost,\n        order_items_summary.drink_cost,\n        order_items_summary.total_cost,\n\n        order_items_summary.food_profit,\n        order_items_summary.drink_profit,\n        order_items_summary.total_profit\n\n    from orders\n\n    inner join order_items_summary using (order_id)\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"orders\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.851068Z", "completed_at": "2025-06-19T22:34:11.853304Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.853518Z", "completed_at": "2025-06-19T22:34:11.857515Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007415056228637695, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.accepted_values_orders_status__completed.9c0d503484", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_platform\".\"main\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.859418Z", "completed_at": "2025-06-19T22:34:11.861419Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.861567Z", "completed_at": "2025-06-19T22:34:11.864968Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0064470767974853516, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_orders_total_cost__0.0da53292dd", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.866694Z", "completed_at": "2025-06-19T22:34:11.868886Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.869047Z", "completed_at": "2025-06-19T22:34:11.872866Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007103919982910156, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_orders_total_items_count__1.34dc2443a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_items_count >= 1\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.874595Z", "completed_at": "2025-06-19T22:34:11.877839Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.878006Z", "completed_at": "2025-06-19T22:34:11.881831Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008141040802001953, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_orders_total_revenue__0.232d3c7cca", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.883584Z", "completed_at": "2025-06-19T22:34:11.885603Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.885765Z", "completed_at": "2025-06-19T22:34:11.889161Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006560087203979492, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_customer_id.c5f02694af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.890909Z", "completed_at": "2025-06-19T22:34:11.893283Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.893465Z", "completed_at": "2025-06-19T22:34:11.896959Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006998777389526367, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_order_date.6910a855fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.898618Z", "completed_at": "2025-06-19T22:34:11.900611Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.900797Z", "completed_at": "2025-06-19T22:34:11.904324Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006610870361328125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_order_id.cf6c17daed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.906308Z", "completed_at": "2025-06-19T22:34:11.909533Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.909690Z", "completed_at": "2025-06-19T22:34:11.912786Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007422924041748047, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_status.8a27272c0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.914641Z", "completed_at": "2025-06-19T22:34:11.916521Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.916730Z", "completed_at": "2025-06-19T22:34:11.920109Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006453990936279297, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_store_id.2bcd3b4d04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.921873Z", "completed_at": "2025-06-19T22:34:11.923777Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.923931Z", "completed_at": "2025-06-19T22:34:11.926978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005995035171508789, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_total_items_count.553bda7b77", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_items_count\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_items_count is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.928641Z", "completed_at": "2025-06-19T22:34:11.930575Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.930782Z", "completed_at": "2025-06-19T22:34:11.933916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006165981292724609, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_total_profit.b2d3d6fa60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_profit\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_profit is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.935540Z", "completed_at": "2025-06-19T22:34:11.938470Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.938629Z", "completed_at": "2025-06-19T22:34:11.941846Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007180213928222656, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_orders_total_revenue.280ed887b4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_revenue\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_revenue is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.943556Z", "completed_at": "2025-06-19T22:34:11.945770Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.945926Z", "completed_at": "2025-06-19T22:34:11.951341Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008734941482543945, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_orders_store_id__store_id__ref_stg_stores_.9afa770d8c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select store_id as from_field\n    from \"jaffle_platform\".\"main\".\"orders\"\n    where store_id is not null\n),\n\nparent as (\n    select store_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_stores\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.953067Z", "completed_at": "2025-06-19T22:34:11.954941Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.955100Z", "completed_at": "2025-06-19T22:34:11.970499Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.01843094825744629, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_orders_order_id.fed79b3a6e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.972739Z", "completed_at": "2025-06-19T22:34:11.975379Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:11.975537Z", "completed_at": "2025-06-19T22:34:11.997052Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.024858951568603516, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jaffle_platform.customers", "compiled": true, "compiled_code": "with customers as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_platform\".\"main\".\"orders\"\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n        \n        min(order_date) as first_order_at,\n        max(order_date) as most_recent_order_at,\n        count(*) as number_of_orders,\n\n        sum(food_items_count) as total_food_items,\n        sum(drink_items_count) as total_drink_items,\n        sum(total_items_count) as total_items,\n\n        \n    round(1.0 * sum(food_revenue * 100) / 100, 2)\n as total_food_revenue,\n        \n    round(1.0 * sum(drink_revenue * 100) / 100, 2)\n as total_drink_revenue,\n        \n    round(1.0 * sum(total_revenue * 100) / 100, 2)\n as total_revenue,\n\n        \n    round(1.0 * sum(food_cost * 100) / 100, 2)\n as total_food_cost,\n        \n    round(1.0 * sum(drink_cost * 100) / 100, 2)\n as total_drink_cost,\n        \n    round(1.0 * sum(total_cost * 100) / 100, 2)\n as total_cost,\n\n        \n    round(1.0 * sum(food_profit * 100) / 100, 2)\n as total_food_profit,\n        \n    round(1.0 * sum(drink_profit * 100) / 100, 2)\n as total_drink_profit,\n        \n    round(1.0 * sum(total_profit * 100) / 100, 2)\n as total_profit,\n\n        \n    round(1.0 * sum(total_revenue * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_value,\n        \n    round(1.0 * sum(total_profit * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_profit\n\n    from orders\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.customer_id,\n        customers.customer_name,\n\n        customer_orders.first_order_at,\n        customer_orders.most_recent_order_at,\n        customer_orders.number_of_orders,\n\n        customer_orders.total_food_items,\n        customer_orders.total_drink_items,\n        customer_orders.total_items,\n\n        customer_orders.total_food_revenue,\n        customer_orders.total_drink_revenue,\n        customer_orders.total_revenue,\n\n        customer_orders.total_food_cost,\n        customer_orders.total_drink_cost,\n        customer_orders.total_cost,\n\n        customer_orders.total_food_profit,\n        customer_orders.total_drink_profit,\n        customer_orders.total_profit,\n\n        customer_orders.avg_order_value,\n        customer_orders.avg_order_profit\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"customers\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:11.998887Z", "completed_at": "2025-06-19T22:34:12.000905Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.001057Z", "completed_at": "2025-06-19T22:34:12.004385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006591081619262695, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_avg_order_value__0.c1c1601f2c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not avg_order_value >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.006320Z", "completed_at": "2025-06-19T22:34:12.008281Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.008442Z", "completed_at": "2025-06-19T22:34:12.011796Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006417751312255859, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_number_of_orders__0.037b1dd78b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not number_of_orders >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.013640Z", "completed_at": "2025-06-19T22:34:12.015589Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.015730Z", "completed_at": "2025-06-19T22:34:12.020015Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007263898849487305, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_cost__0.0a4e71d80a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.021588Z", "completed_at": "2025-06-19T22:34:12.023328Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.023469Z", "completed_at": "2025-06-19T22:34:12.026385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0056018829345703125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_cost__0.fa5c6d903f", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.028060Z", "completed_at": "2025-06-19T22:34:12.030201Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.030358Z", "completed_at": "2025-06-19T22:34:12.033884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006701946258544922, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_items__0.9997c8c335", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.035528Z", "completed_at": "2025-06-19T22:34:12.037569Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.037764Z", "completed_at": "2025-06-19T22:34:12.041655Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0071430206298828125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_drink_revenue__0.b99e7e96c4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.043453Z", "completed_at": "2025-06-19T22:34:12.045427Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.045585Z", "completed_at": "2025-06-19T22:34:12.050028Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007436990737915039, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_cost__0.c65392d802", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.051661Z", "completed_at": "2025-06-19T22:34:12.053530Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.053692Z", "completed_at": "2025-06-19T22:34:12.057110Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006451845169067383, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_items__0.828da3e8bc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.058953Z", "completed_at": "2025-06-19T22:34:12.060774Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.060937Z", "completed_at": "2025-06-19T22:34:12.064339Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006293058395385742, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_food_revenue__0.3e10988d11", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.066037Z", "completed_at": "2025-06-19T22:34:12.068156Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.068321Z", "completed_at": "2025-06-19T22:34:12.071718Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006619930267333984, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_items__0.3d7b0a080a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.073539Z", "completed_at": "2025-06-19T22:34:12.075440Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.075596Z", "completed_at": "2025-06-19T22:34:12.079030Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006627082824707031, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.dbt_utils_accepted_range_customers_total_revenue__0.217c0fc785", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.080950Z", "completed_at": "2025-06-19T22:34:12.084094Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.084258Z", "completed_at": "2025-06-19T22:34:12.087540Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007673978805541992, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_customers_customer_id.5c9bf9911d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.089470Z", "completed_at": "2025-06-19T22:34:12.091317Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.091501Z", "completed_at": "2025-06-19T22:34:12.094563Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.005997896194458008, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.not_null_customers_customer_name.2bf8eaa065", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.096258Z", "completed_at": "2025-06-19T22:34:12.098827Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.098978Z", "completed_at": "2025-06-19T22:34:12.104929Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009617090225219727, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_platform\".\"main\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_platform\".\"main\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T22:34:12.106743Z", "completed_at": "2025-06-19T22:34:12.108528Z"}, {"name": "execute", "started_at": "2025-06-19T22:34:12.108663Z", "completed_at": "2025-06-19T22:34:12.112147Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006575107574462891, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jaffle_platform.unique_customers_customer_id.c5af1ff4b1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 2.6961939334869385, "args": {"require_all_warnings_handled_by_warn_error": false, "exclude_resource_types": [], "quiet": false, "printer_width": 80, "static_parser": true, "defer": false, "cache_selected_only": false, "show_all_deprecations": false, "require_explicit_package_overrides_for_builtin_materializations": true, "skip_nodes_if_on_run_start_fails": false, "profiles_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt", "project_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt", "version_check": true, "include_saved_query": false, "favor_state": false, "log_file_max_bytes": 10485760, "state_modified_compare_more_unrendered_values": false, "upload_to_artifacts_ingest_api": false, "source_freshness_run_project_hooks": true, "require_yaml_configuration_for_mf_time_spines": false, "write_json": true, "log_path": "/Users/thomastrividic/code/python/jaffle-platform/dbt/logs", "show_resource_report": false, "partial_parse": true, "state_modified_compare_vars": false, "print": true, "use_colors_file": true, "export_saved_queries": false, "require_nested_cumulative_type_params": false, "log_format_file": "debug", "select": [], "send_anonymous_usage_stats": true, "indirect_selection": "eager", "log_level_file": "debug", "strict_mode": false, "use_fast_test_edges": false, "warn_error_options": {"error": [], "warn": [], "silence": []}, "invocation_command": "dbt build", "show": false, "use_colors": true, "require_resource_names_without_spaces": true, "validate_macro_args": false, "log_level": "info", "populate_cache": true, "log_format": "default", "exclude": [], "introspect": true, "empty": false, "macro_debugging": false, "require_batched_execution_for_custom_microbatch_strategy": false, "vars": {}, "resource_types": [], "which": "build", "partial_parse_file_diff": true}}