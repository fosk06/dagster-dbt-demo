{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.9.8", "generated_at": "2025-06-19T20:09:26.652068Z", "invocation_id": "2eb29793-6f43-4e66-a04e-bd1d5859ce17", "env": {}}, "results": [{"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.749743Z", "completed_at": "2025-06-19T20:09:23.757509Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.757754Z", "completed_at": "2025-06-19T20:09:23.770695Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.02219700813293457, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_customers_id.fd630b40ed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_customers\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.773089Z", "completed_at": "2025-06-19T20:09:23.775101Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.775328Z", "completed_at": "2025-06-19T20:09:23.779261Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007441282272338867, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_items_id.ba04a3f168", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_items\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.782042Z", "completed_at": "2025-06-19T20:09:23.784167Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.784401Z", "completed_at": "2025-06-19T20:09:23.788143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007466316223144531, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_orders_id.8d0b417515", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_orders\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.790829Z", "completed_at": "2025-06-19T20:09:23.792838Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.793068Z", "completed_at": "2025-06-19T20:09:23.797916Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008517742156982422, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_products_sku.9ea5f86121", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect sku\nfrom \"jaffle_platform\".\"main\".\"raw_products\"\nwhere sku is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.800563Z", "completed_at": "2025-06-19T20:09:23.802558Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.802777Z", "completed_at": "2025-06-19T20:09:23.806884Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007649660110473633, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_stores_id.bf84e62e4c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_stores\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.809381Z", "completed_at": "2025-06-19T20:09:23.811391Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.811633Z", "completed_at": "2025-06-19T20:09:23.815439Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007306814193725586, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_not_null_main_raw_supplies_id.fe2c38d6d5", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect id\nfrom \"jaffle_platform\".\"main\".\"raw_supplies\"\nwhere id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.818113Z", "completed_at": "2025-06-19T20:09:23.820863Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.821089Z", "completed_at": "2025-06-19T20:09:23.831130Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014607906341552734, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_unique_main_raw_customers_id.42581a7c1b", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_customers\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.833870Z", "completed_at": "2025-06-19T20:09:23.835842Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.836051Z", "completed_at": "2025-06-19T20:09:23.881519Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.049002885818481445, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_unique_main_raw_items_id.9fb85e5588", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_items\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.884134Z", "completed_at": "2025-06-19T20:09:23.886839Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.887092Z", "completed_at": "2025-06-19T20:09:23.910374Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027575016021728516, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_unique_main_raw_orders_id.fd49aea3d7", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_orders\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.913015Z", "completed_at": "2025-06-19T20:09:23.915288Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.915536Z", "completed_at": "2025-06-19T20:09:23.920486Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00884103775024414, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_unique_main_raw_products_sku.7677d51e94", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    sku as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_products\"\nwhere sku is not null\ngroup by sku\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.923187Z", "completed_at": "2025-06-19T20:09:23.925308Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.925597Z", "completed_at": "2025-06-19T20:09:23.929906Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008014202117919922, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.source_unique_main_raw_stores_id.067b11d4e6", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"raw_stores\"\nwhere id is not null\ngroup by id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.932530Z", "completed_at": "2025-06-19T20:09:23.934298Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.934522Z", "completed_at": "2025-06-19T20:09:23.966169Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.034387826919555664, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_supplies", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_supplies\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as supply_id,\n        sku as product_id,\n\n        ----------  strings\n        name as supply_name,\n\n        ----------  numerics\n        cost as supply_cost,\n\n        ----------  booleans\n        perishable\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_supplies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.969246Z", "completed_at": "2025-06-19T20:09:23.970719Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.970941Z", "completed_at": "2025-06-19T20:09:23.983331Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014811277389526367, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_customers", "compiled": true, "compiled_code": "with source as (\n    select * from \"jaffle_platform\".\"main\".\"raw_customers\"\n\n),\n\nrenamed as (\n\n    select\n        id as customer_id,\n        name as customer_name\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_customers\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:23.985348Z", "completed_at": "2025-06-19T20:09:23.987151Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:23.987452Z", "completed_at": "2025-06-19T20:09:23.999002Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014418840408325195, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_order_items", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_items\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as order_item_id,\n        order_id,\n        sku as product_id\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.000980Z", "completed_at": "2025-06-19T20:09:24.002678Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.002903Z", "completed_at": "2025-06-19T20:09:24.016027Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015759706497192383, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_orders", "compiled": true, "compiled_code": "with source as (\n    select * from \"jaffle_platform\".\"main\".\"raw_orders\"\n\n),\n\nrenamed as (\n\n    select\n        id as order_id,\n        customer as customer_id,\n        ordered_at as order_date,\n        store_id,\n        subtotal,\n        tax_paid,\n        order_total,\n        'completed' as status  -- Assuming all orders are completed since we don't have status in raw data\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_orders\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.018597Z", "completed_at": "2025-06-19T20:09:24.020182Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.020382Z", "completed_at": "2025-06-19T20:09:24.033569Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015760183334350586, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_products", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_products\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        sku as product_id,\n\n        ----------  strings\n        name as product_name,\n        type as product_type,\n        description,\n\n        ----------  numerics\n        price as product_price,\n\n        ----------  booleans\n        type = 'food' as is_food_item,\n        type = 'drink' as is_drink_item\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_products\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.036095Z", "completed_at": "2025-06-19T20:09:24.037750Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.037970Z", "completed_at": "2025-06-19T20:09:24.049411Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.014335870742797852, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.stg_stores", "compiled": true, "compiled_code": "with source as (\n\n    select * from \"jaffle_platform\".\"main\".\"raw_stores\"\n\n),\n\nrenamed as (\n\n    select\n        ----------  ids\n        id as store_id,\n\n        ----------  strings\n        name as store_name,\n\n        ----------  timestamps\n        opened_at as opened_at,\n\n        ----------  numerics\n        tax_rate\n\n    from source\n\n)\n\nselect * from renamed", "relation_name": "\"jaffle_platform\".\"main\".\"stg_stores\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.051744Z", "completed_at": "2025-06-19T20:09:24.055502Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.055840Z", "completed_at": "2025-06-19T20:09:24.061173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010993242263793945, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_stg_supplies_supply_cost__0.56f9d0fff2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_supplies\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not supply_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.063909Z", "completed_at": "2025-06-19T20:09:24.067037Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.067259Z", "completed_at": "2025-06-19T20:09:24.071362Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008777856826782227, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_supplies_perishable.b0ad96f801", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect perishable\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere perishable is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.073869Z", "completed_at": "2025-06-19T20:09:24.075881Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.076116Z", "completed_at": "2025-06-19T20:09:24.079941Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007397174835205078, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_supplies_product_id.ecc7615471", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.082513Z", "completed_at": "2025-06-19T20:09:24.084814Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.085106Z", "completed_at": "2025-06-19T20:09:24.089180Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007945060729980469, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_supplies_supply_cost.5de3da4f1d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_cost\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_cost is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.091668Z", "completed_at": "2025-06-19T20:09:24.093641Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.093867Z", "completed_at": "2025-06-19T20:09:24.097805Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007660865783691406, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_supplies_supply_id.2638ae6962", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_id\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.100590Z", "completed_at": "2025-06-19T20:09:24.103702Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.103918Z", "completed_at": "2025-06-19T20:09:24.108024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00896000862121582, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_supplies_supply_name.cc30977dd2", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect supply_name\nfrom \"jaffle_platform\".\"main\".\"stg_supplies\"\nwhere supply_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.110878Z", "completed_at": "2025-06-19T20:09:24.113118Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.113361Z", "completed_at": "2025-06-19T20:09:24.117330Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007721900939941406, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_order_items_order_id.2063801f96", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.119740Z", "completed_at": "2025-06-19T20:09:24.121715Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.122056Z", "completed_at": "2025-06-19T20:09:24.126270Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007857084274291992, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_order_items_order_item_id.26a7e2bc35", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.128874Z", "completed_at": "2025-06-19T20:09:24.130840Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.131155Z", "completed_at": "2025-06-19T20:09:24.135727Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008356094360351562, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_order_items_product_id.5154a8a6f6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.138543Z", "completed_at": "2025-06-19T20:09:24.140689Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.140917Z", "completed_at": "2025-06-19T20:09:24.169466Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03234219551086426, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_stg_order_items_order_item_id.90e333a108", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.172053Z", "completed_at": "2025-06-19T20:09:24.174917Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.175704Z", "completed_at": "2025-06-19T20:09:24.180590Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009800910949707031, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_orders_order_id.81cfe2fe64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"stg_orders\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.183237Z", "completed_at": "2025-06-19T20:09:24.186918Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.187154Z", "completed_at": "2025-06-19T20:09:24.237577Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.056036949157714844, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_stg_order_items_order_id__order_id__ref_stg_orders_.dbe9930c54", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select order_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_order_items\"\n    where order_id is not null\n),\n\nparent as (\n    select order_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_orders\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.240575Z", "completed_at": "2025-06-19T20:09:24.243256Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.243504Z", "completed_at": "2025-06-19T20:09:24.266394Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.027179956436157227, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_stg_orders_order_id.e3b841c71a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.268719Z", "completed_at": "2025-06-19T20:09:24.272673Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.272930Z", "completed_at": "2025-06-19T20:09:24.279406Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012017965316772461, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.accepted_values_stg_products_product_type__beverage__jaffle.a9aed4257e", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        product_type as value_field,\n        count(*) as n_records\n\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n    group by product_type\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'beverage','jaffle'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.282195Z", "completed_at": "2025-06-19T20:09:24.284402Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.284627Z", "completed_at": "2025-06-19T20:09:24.288725Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007790803909301758, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_stg_products_product_price__0.d7d70a9cd2", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_products\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.291213Z", "completed_at": "2025-06-19T20:09:24.293213Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.293479Z", "completed_at": "2025-06-19T20:09:24.297337Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074689388275146484, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_is_drink_item.339e87c30d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_drink_item\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere is_drink_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.299729Z", "completed_at": "2025-06-19T20:09:24.301530Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.301747Z", "completed_at": "2025-06-19T20:09:24.305955Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007430076599121094, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_is_food_item.8e5e6fcdb1", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_food_item\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere is_food_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.308216Z", "completed_at": "2025-06-19T20:09:24.310041Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.310260Z", "completed_at": "2025-06-19T20:09:24.314964Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008234977722167969, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_product_id.6373b0acf3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.318004Z", "completed_at": "2025-06-19T20:09:24.319993Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.320227Z", "completed_at": "2025-06-19T20:09:24.324428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007652759552001953, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_product_name.0b59e4b939", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.326872Z", "completed_at": "2025-06-19T20:09:24.328959Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.329253Z", "completed_at": "2025-06-19T20:09:24.333689Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008307933807373047, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_product_price.d96fdc5e1e", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.336485Z", "completed_at": "2025-06-19T20:09:24.338357Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.338586Z", "completed_at": "2025-06-19T20:09:24.342646Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007542133331298828, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_products_product_type.7dbdaaf4d8", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_type\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_type is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.345053Z", "completed_at": "2025-06-19T20:09:24.347461Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.347692Z", "completed_at": "2025-06-19T20:09:24.355766Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.012021064758300781, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_stg_order_items_product_id__product_id__ref_stg_products_.886a82c26c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_order_items\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.358285Z", "completed_at": "2025-06-19T20:09:24.361053Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.361303Z", "completed_at": "2025-06-19T20:09:24.365860Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009028911590576172, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_stg_supplies_product_id__product_id__ref_stg_products_.b24247ed0a", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"stg_supplies\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.368930Z", "completed_at": "2025-06-19T20:09:24.371193Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.371433Z", "completed_at": "2025-06-19T20:09:24.376591Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009151935577392578, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_stg_products_product_id.7d950a1467", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    product_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_products\"\nwhere product_id is not null\ngroup by product_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.379540Z", "completed_at": "2025-06-19T20:09:24.381885Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.382137Z", "completed_at": "2025-06-19T20:09:24.386939Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008986234664916992, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_stg_stores_tax_rate__1__0.4b4a0f1520", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"stg_stores\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate >= 0\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not tax_rate <= 1\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.389474Z", "completed_at": "2025-06-19T20:09:24.391426Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.391650Z", "completed_at": "2025-06-19T20:09:24.397283Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009003877639770508, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_stores_opened_at.7656b80b64", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect opened_at\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere opened_at is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.399783Z", "completed_at": "2025-06-19T20:09:24.401963Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.402195Z", "completed_at": "2025-06-19T20:09:24.406235Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007912874221801758, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_stores_store_id.ebecf07ec6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.408811Z", "completed_at": "2025-06-19T20:09:24.410845Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.411135Z", "completed_at": "2025-06-19T20:09:24.415227Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0077359676361083984, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_stores_store_name.a23576c3a7", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_name\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.417632Z", "completed_at": "2025-06-19T20:09:24.419577Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.419810Z", "completed_at": "2025-06-19T20:09:24.423650Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0072247982025146484, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_stg_stores_tax_rate.b05a8726c6", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect tax_rate\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere tax_rate is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.425963Z", "completed_at": "2025-06-19T20:09:24.427902Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.428130Z", "completed_at": "2025-06-19T20:09:24.435189Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010497093200683594, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_stg_stores_store_id.2e80d074c2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    store_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"stg_stores\"\nwhere store_id is not null\ngroup by store_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.437921Z", "completed_at": "2025-06-19T20:09:24.439704Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.439938Z", "completed_at": "2025-06-19T20:09:24.463673Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0265960693359375, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.supplies", "compiled": true, "compiled_code": "select * from \"jaffle_platform\".\"main\".\"stg_supplies\"", "relation_name": "\"jaffle_platform\".\"main\".\"supplies\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:24.465834Z", "completed_at": "2025-06-19T20:09:24.468645Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:24.468892Z", "completed_at": "2025-06-19T20:09:25.424634Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.9596090316772461, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.order_items", "compiled": true, "compiled_code": "with order_items as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_order_items\"\n\n),\n\norders as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_orders\"\n\n),\n\nproducts as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_products\"\n\n),\n\nsupplies as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_supplies\"\n\n),\n\norder_supplies_summary as (\n\n    select\n        product_id,\n        sum(supply_cost) as supply_cost\n    from supplies\n    group by 1\n\n),\n\njoined as (\n\n    select\n        order_items.*,\n\n        orders.order_date,\n        orders.store_id,\n\n        products.product_name,\n        \n    round(1.0 * products.product_price / 100, 2)\n as product_price,\n        products.is_food_item,\n        products.is_drink_item,\n\n        \n    round(1.0 * order_supplies_summary.supply_cost / 100, 2)\n as supply_cost,\n\n        -- calculated fields\n        \n    round(1.0 * products.product_price - coalesce(order_supplies_summary.supply_cost, 0) / 100, 2)\n as gross_profit_per_item\n\n    from order_items\n\n    left join orders on order_items.order_id = orders.order_id\n\n    left join products on order_items.product_id = products.product_id\n\n    left join order_supplies_summary\n        on order_items.product_id = order_supplies_summary.product_id\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"order_items\"", "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.426733Z", "completed_at": "2025-06-19T20:09:25.428228Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.428478Z", "completed_at": "2025-06-19T20:09:25.441234Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.015204906463623047, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.products", "compiled": true, "compiled_code": "select * from \"jaffle_platform\".\"main\".\"stg_products\"", "relation_name": "\"jaffle_platform\".\"main\".\"products\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.443428Z", "completed_at": "2025-06-19T20:09:25.446737Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.446976Z", "completed_at": "2025-06-19T20:09:25.451359Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009285211563110352, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_order_items_product_price__0.43ad7e7f39", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"order_items\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not product_price >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.453983Z", "completed_at": "2025-06-19T20:09:25.456220Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.456467Z", "completed_at": "2025-06-19T20:09:25.460628Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007946968078613281, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_order_items_supply_cost__0.840b4d2b26", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"order_items\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not supply_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.463266Z", "completed_at": "2025-06-19T20:09:25.465436Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.465671Z", "completed_at": "2025-06-19T20:09:25.469521Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007823705673217773, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_gross_profit_per_item.48da24203b", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect gross_profit_per_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere gross_profit_per_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.472084Z", "completed_at": "2025-06-19T20:09:25.474113Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.474339Z", "completed_at": "2025-06-19T20:09:25.478295Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007574796676635742, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_is_drink_item.6bb8231b5a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_drink_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere is_drink_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.481010Z", "completed_at": "2025-06-19T20:09:25.484492Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.484714Z", "completed_at": "2025-06-19T20:09:25.488484Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008899688720703125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_is_food_item.c5a4aa0725", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect is_food_item\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere is_food_item is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.491186Z", "completed_at": "2025-06-19T20:09:25.493079Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.493292Z", "completed_at": "2025-06-19T20:09:25.496792Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.006954193115234375, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_order_date.287d23d5d3", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.499141Z", "completed_at": "2025-06-19T20:09:25.501051Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.501387Z", "completed_at": "2025-06-19T20:09:25.505589Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007670879364013672, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_order_id.0207cf2b74", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.508132Z", "completed_at": "2025-06-19T20:09:25.510347Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.510604Z", "completed_at": "2025-06-19T20:09:25.514857Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007994890213012695, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_order_item_id.c6fda366bd", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_item_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_item_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.517243Z", "completed_at": "2025-06-19T20:09:25.520759Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.520981Z", "completed_at": "2025-06-19T20:09:25.524677Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008631229400634766, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_product_id.d5e49d7c32", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.527069Z", "completed_at": "2025-06-19T20:09:25.529321Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.529537Z", "completed_at": "2025-06-19T20:09:25.533225Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074481964111328125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_product_name.86cd0cf29d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_name\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.535699Z", "completed_at": "2025-06-19T20:09:25.537883Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.538120Z", "completed_at": "2025-06-19T20:09:25.541775Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007292032241821289, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_product_price.9e29b4995d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect product_price\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere product_price is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.544176Z", "completed_at": "2025-06-19T20:09:25.546257Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.546487Z", "completed_at": "2025-06-19T20:09:25.550173Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007215738296508789, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_order_items_store_id.dcf872af5c", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.552540Z", "completed_at": "2025-06-19T20:09:25.556533Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.556861Z", "completed_at": "2025-06-19T20:09:25.564913Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.013715028762817383, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_order_items_product_id__product_id__ref_stg_products_.32c12f5221", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select product_id as from_field\n    from \"jaffle_platform\".\"main\".\"order_items\"\n    where product_id is not null\n),\n\nparent as (\n    select product_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_products\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.567792Z", "completed_at": "2025-06-19T20:09:25.572708Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.576237Z", "completed_at": "2025-06-19T20:09:25.585840Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019672870635986328, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_order_items_store_id__store_id__ref_stg_stores_.3506d5359d", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select store_id as from_field\n    from \"jaffle_platform\".\"main\".\"order_items\"\n    where store_id is not null\n),\n\nparent as (\n    select store_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_stores\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.588439Z", "completed_at": "2025-06-19T20:09:25.590733Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.590942Z", "completed_at": "2025-06-19T20:09:25.618428Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.03130698204040527, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_order_items_order_item_id.7d0a7e900a", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_item_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"order_items\"\nwhere order_item_id is not null\ngroup by order_item_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:25.621438Z", "completed_at": "2025-06-19T20:09:25.624096Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:25.624322Z", "completed_at": "2025-06-19T20:09:26.332350Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.711705207824707, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.orders", "compiled": true, "compiled_code": "with orders as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_orders\"\n\n),\n\norder_items as (\n\n    select * from \"jaffle_platform\".\"main\".\"order_items\"\n\n),\n\norder_items_summary as (\n\n    select\n        order_id,\n        \n        sum(case when is_food_item then 1 else 0 end) as food_items_count,\n        sum(case when is_drink_item then 1 else 0 end) as drink_items_count,\n        count(*) as total_items_count,\n\n        \n    round(1.0 * sum(case when is_food_item then product_price * 100 else 0 end) / 100, 2)\n as food_revenue,\n        \n    round(1.0 * sum(case when is_drink_item then product_price * 100 else 0 end) / 100, 2)\n as drink_revenue,\n        \n    round(1.0 * sum(product_price * 100) / 100, 2)\n as total_revenue,\n\n        \n    round(1.0 * sum(case when is_food_item then supply_cost * 100 else 0 end) / 100, 2)\n as food_cost,\n        \n    round(1.0 * sum(case when is_drink_item then supply_cost * 100 else 0 end) / 100, 2)\n as drink_cost,\n        \n    round(1.0 * sum(supply_cost * 100) / 100, 2)\n as total_cost,\n\n        \n    round(1.0 * sum(case when is_food_item then gross_profit_per_item * 100 else 0 end) / 100, 2)\n as food_profit,\n        \n    round(1.0 * sum(case when is_drink_item then gross_profit_per_item * 100 else 0 end) / 100, 2)\n as drink_profit,\n        \n    round(1.0 * sum(gross_profit_per_item * 100) / 100, 2)\n as total_profit\n\n    from order_items\n    group by 1\n\n),\n\njoined as (\n\n    select\n        orders.order_id,\n        orders.customer_id,\n        orders.store_id,\n        orders.order_date,\n        orders.status,\n\n        order_items_summary.food_items_count,\n        order_items_summary.drink_items_count,\n        order_items_summary.total_items_count,\n\n        order_items_summary.food_revenue,\n        order_items_summary.drink_revenue,\n        order_items_summary.total_revenue,\n\n        order_items_summary.food_cost,\n        order_items_summary.drink_cost,\n        order_items_summary.total_cost,\n\n        order_items_summary.food_profit,\n        order_items_summary.drink_profit,\n        order_items_summary.total_profit\n\n    from orders\n\n    inner join order_items_summary using (order_id)\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"orders\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.334609Z", "completed_at": "2025-06-19T20:09:26.336986Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.337220Z", "completed_at": "2025-06-19T20:09:26.342511Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009195089340209961, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.accepted_values_orders_status__completed.9c0d503484", "compiled": true, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        status as value_field,\n        count(*) as n_records\n\n    from \"jaffle_platform\".\"main\".\"orders\"\n    group by status\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'completed'\n)\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.345117Z", "completed_at": "2025-06-19T20:09:26.347161Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.347389Z", "completed_at": "2025-06-19T20:09:26.351385Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00755000114440918, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_orders_total_cost__0.0da53292dd", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.353918Z", "completed_at": "2025-06-19T20:09:26.356031Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.356262Z", "completed_at": "2025-06-19T20:09:26.361437Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008792877197265625, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_orders_total_items_count__1.34dc2443a7", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_items_count >= 1\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.364043Z", "completed_at": "2025-06-19T20:09:26.365998Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.366213Z", "completed_at": "2025-06-19T20:09:26.370151Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007924079895019531, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_orders_total_revenue__0.232d3c7cca", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"orders\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.373002Z", "completed_at": "2025-06-19T20:09:26.374910Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.375132Z", "completed_at": "2025-06-19T20:09:26.379156Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0076351165771484375, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_customer_id.c5f02694af", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.381986Z", "completed_at": "2025-06-19T20:09:26.384320Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.384532Z", "completed_at": "2025-06-19T20:09:26.388571Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008068084716796875, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_order_date.6910a855fe", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_date\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_date is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.391045Z", "completed_at": "2025-06-19T20:09:26.392898Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.393114Z", "completed_at": "2025-06-19T20:09:26.398069Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008307218551635742, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_order_id.cf6c17daed", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect order_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.400740Z", "completed_at": "2025-06-19T20:09:26.402554Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.402767Z", "completed_at": "2025-06-19T20:09:26.406364Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00687408447265625, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_status.8a27272c0a", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect status\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere status is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.408884Z", "completed_at": "2025-06-19T20:09:26.411016Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.411253Z", "completed_at": "2025-06-19T20:09:26.415498Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008116006851196289, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_store_id.2bcd3b4d04", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect store_id\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere store_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.418490Z", "completed_at": "2025-06-19T20:09:26.420534Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.420751Z", "completed_at": "2025-06-19T20:09:26.424239Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007008075714111328, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_total_items_count.553bda7b77", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_items_count\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_items_count is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.426570Z", "completed_at": "2025-06-19T20:09:26.428447Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.428665Z", "completed_at": "2025-06-19T20:09:26.434102Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00875401496887207, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_total_profit.b2d3d6fa60", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_profit\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_profit is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.436554Z", "completed_at": "2025-06-19T20:09:26.438757Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.438983Z", "completed_at": "2025-06-19T20:09:26.442599Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007272005081176758, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_orders_total_revenue.280ed887b4", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect total_revenue\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere total_revenue is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.445047Z", "completed_at": "2025-06-19T20:09:26.447661Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.447884Z", "completed_at": "2025-06-19T20:09:26.453714Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009924888610839844, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_orders_store_id__store_id__ref_stg_stores_.9afa770d8c", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select store_id as from_field\n    from \"jaffle_platform\".\"main\".\"orders\"\n    where store_id is not null\n),\n\nparent as (\n    select store_id as to_field\n    from \"jaffle_platform\".\"main\".\"stg_stores\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.456181Z", "completed_at": "2025-06-19T20:09:26.458301Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.458542Z", "completed_at": "2025-06-19T20:09:26.474060Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.019272804260253906, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_orders_order_id.fed79b3a6e", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    order_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"orders\"\nwhere order_id is not null\ngroup by order_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.476763Z", "completed_at": "2025-06-19T20:09:26.479345Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.479570Z", "completed_at": "2025-06-19T20:09:26.506192Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.030129194259643555, "adapter_response": {"_message": "OK"}, "message": "OK", "failures": null, "unique_id": "model.jdbt.customers", "compiled": true, "compiled_code": "with customers as (\n\n    select * from \"jaffle_platform\".\"main\".\"stg_customers\"\n\n),\n\norders as (\n\n    select * from \"jaffle_platform\".\"main\".\"orders\"\n\n),\n\ncustomer_orders as (\n\n    select\n        customer_id,\n        \n        min(order_date) as first_order_at,\n        max(order_date) as most_recent_order_at,\n        count(*) as number_of_orders,\n\n        sum(food_items_count) as total_food_items,\n        sum(drink_items_count) as total_drink_items,\n        sum(total_items_count) as total_items,\n\n        \n    round(1.0 * sum(food_revenue * 100) / 100, 2)\n as total_food_revenue,\n        \n    round(1.0 * sum(drink_revenue * 100) / 100, 2)\n as total_drink_revenue,\n        \n    round(1.0 * sum(total_revenue * 100) / 100, 2)\n as total_revenue,\n\n        \n    round(1.0 * sum(food_cost * 100) / 100, 2)\n as total_food_cost,\n        \n    round(1.0 * sum(drink_cost * 100) / 100, 2)\n as total_drink_cost,\n        \n    round(1.0 * sum(total_cost * 100) / 100, 2)\n as total_cost,\n\n        \n    round(1.0 * sum(food_profit * 100) / 100, 2)\n as total_food_profit,\n        \n    round(1.0 * sum(drink_profit * 100) / 100, 2)\n as total_drink_profit,\n        \n    round(1.0 * sum(total_profit * 100) / 100, 2)\n as total_profit,\n\n        \n    round(1.0 * sum(total_revenue * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_value,\n        \n    round(1.0 * sum(total_profit * 100) / nullif(count(*), 0) / 100, 2)\n as avg_order_profit\n\n    from orders\n    group by 1\n\n),\n\njoined as (\n\n    select\n        customers.customer_id,\n        customers.customer_name,\n\n        customer_orders.first_order_at,\n        customer_orders.most_recent_order_at,\n        customer_orders.number_of_orders,\n\n        customer_orders.total_food_items,\n        customer_orders.total_drink_items,\n        customer_orders.total_items,\n\n        customer_orders.total_food_revenue,\n        customer_orders.total_drink_revenue,\n        customer_orders.total_revenue,\n\n        customer_orders.total_food_cost,\n        customer_orders.total_drink_cost,\n        customer_orders.total_cost,\n\n        customer_orders.total_food_profit,\n        customer_orders.total_drink_profit,\n        customer_orders.total_profit,\n\n        customer_orders.avg_order_value,\n        customer_orders.avg_order_profit\n\n    from customers\n\n    left join customer_orders using (customer_id)\n\n)\n\nselect * from joined", "relation_name": "\"jaffle_platform\".\"main\".\"customers\"", "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.508383Z", "completed_at": "2025-06-19T20:09:26.510614Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.510860Z", "completed_at": "2025-06-19T20:09:26.515373Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00830698013305664, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_avg_order_value__0.c1c1601f2c", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not avg_order_value >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.517872Z", "completed_at": "2025-06-19T20:09:26.520194Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.520421Z", "completed_at": "2025-06-19T20:09:26.524665Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008136987686157227, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_number_of_orders__0.037b1dd78b", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not number_of_orders >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.527204Z", "completed_at": "2025-06-19T20:09:26.530441Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.530686Z", "completed_at": "2025-06-19T20:09:26.534938Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.00905299186706543, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_cost__0.0a4e71d80a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.537472Z", "completed_at": "2025-06-19T20:09:26.539542Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.539852Z", "completed_at": "2025-06-19T20:09:26.544024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007944822311401367, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_drink_cost__0.fa5c6d903f", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.546500Z", "completed_at": "2025-06-19T20:09:26.548705Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.548941Z", "completed_at": "2025-06-19T20:09:26.552927Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007714748382568359, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_drink_items__0.9997c8c335", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.555596Z", "completed_at": "2025-06-19T20:09:26.557511Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.557722Z", "completed_at": "2025-06-19T20:09:26.561666Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074961185455322266, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_drink_revenue__0.b99e7e96c4", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_drink_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.564334Z", "completed_at": "2025-06-19T20:09:26.566445Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.566689Z", "completed_at": "2025-06-19T20:09:26.572226Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.009339094161987305, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_food_cost__0.c65392d802", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_cost >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.574706Z", "completed_at": "2025-06-19T20:09:26.576717Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.577026Z", "completed_at": "2025-06-19T20:09:26.580978Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0074770450592041016, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_food_items__0.828da3e8bc", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.583271Z", "completed_at": "2025-06-19T20:09:26.585183Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.585401Z", "completed_at": "2025-06-19T20:09:26.589716Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007645845413208008, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_food_revenue__0.3e10988d11", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_food_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.592169Z", "completed_at": "2025-06-19T20:09:26.593970Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.594187Z", "completed_at": "2025-06-19T20:09:26.598117Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0072040557861328125, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_items__0.3d7b0a080a", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_items >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.600646Z", "completed_at": "2025-06-19T20:09:26.602744Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.602972Z", "completed_at": "2025-06-19T20:09:26.608282Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008893013000488281, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.dbt_utils_accepted_range_customers_total_revenue__0.217c0fc785", "compiled": true, "compiled_code": "\n\nwith meet_condition as(\n  select *\n  from \"jaffle_platform\".\"main\".\"customers\"\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not total_revenue >= 0\n)\n\nselect *\nfrom validation_errors\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.610730Z", "completed_at": "2025-06-19T20:09:26.612964Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.613209Z", "completed_at": "2025-06-19T20:09:26.617024Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.0075490474700927734, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_customers_customer_id.5c9bf9911d", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_id\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.619368Z", "completed_at": "2025-06-19T20:09:26.621576Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.621801Z", "completed_at": "2025-06-19T20:09:26.625360Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.007153987884521484, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.not_null_customers_customer_name.2bf8eaa065", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect customer_name\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_name is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.627713Z", "completed_at": "2025-06-19T20:09:26.630452Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.630696Z", "completed_at": "2025-06-19T20:09:26.637357Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.010949850082397461, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.relationships_orders_customer_id__customer_id__ref_customers_.c6ec7f58f2", "compiled": true, "compiled_code": "\n    \n    \n\nwith child as (\n    select customer_id as from_field\n    from \"jaffle_platform\".\"main\".\"orders\"\n    where customer_id is not null\n),\n\nparent as (\n    select customer_id as to_field\n    from \"jaffle_platform\".\"main\".\"customers\"\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n\n", "relation_name": null, "batch_results": null}, {"status": "pass", "timing": [{"name": "compile", "started_at": "2025-06-19T20:09:26.639744Z", "completed_at": "2025-06-19T20:09:26.641808Z"}, {"name": "execute", "started_at": "2025-06-19T20:09:26.642029Z", "completed_at": "2025-06-19T20:09:26.647410Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.008862972259521484, "adapter_response": {"_message": "OK"}, "message": null, "failures": 0, "unique_id": "test.jdbt.unique_customers_customer_id.c5af1ff4b1", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    customer_id as unique_field,\n    count(*) as n_records\n\nfrom \"jaffle_platform\".\"main\".\"customers\"\nwhere customer_id is not null\ngroup by customer_id\nhaving count(*) > 1\n\n\n", "relation_name": null, "batch_results": null}], "elapsed_time": 3.0537588596343994, "args": {"profiles_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt/jdbt", "warn_error_options": {"include": [], "exclude": []}, "log_format": "json", "cache_selected_only": false, "state_modified_compare_vars": false, "show": false, "print": true, "macro_debugging": false, "printer_width": 80, "version_check": true, "resource_types": [], "source_freshness_run_project_hooks": false, "include_saved_query": false, "vars": {}, "partial_parse": true, "select": ["fqn:*"], "log_level": "info", "partial_parse_file_diff": true, "which": "build", "require_explicit_package_overrides_for_builtin_materializations": true, "exclude": [], "require_resource_names_without_spaces": false, "favor_state": false, "use_colors": true, "log_file_max_bytes": 10485760, "log_format_file": "json", "introspect": true, "log_level_file": "debug", "require_yaml_configuration_for_mf_time_spines": false, "write_json": true, "use_colors_file": true, "state_modified_compare_more_unrendered_values": false, "strict_mode": false, "target_path": "target/jdbt-129323e-809f75f", "populate_cache": true, "exclude_resource_types": [], "show_resource_report": false, "empty": false, "export_saved_queries": false, "require_nested_cumulative_type_params": false, "quiet": false, "defer": false, "indirect_selection": "eager", "invocation_command": "dbt build --select fqn:*", "skip_nodes_if_on_run_start_fails": false, "project_dir": "/Users/thomastrividic/code/python/jaffle-platform/dbt/jdbt", "send_anonymous_usage_stats": false, "static_parser": true, "log_path": "/Users/thomastrividic/code/python/jaffle-platform/dbt/jdbt/target/jdbt-129323e-809f75f", "require_batched_execution_for_custom_microbatch_strategy": false}}